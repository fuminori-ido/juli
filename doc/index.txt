<h1>Juli, an offline wiki &amp; outliner with your favorite editor</h1>

This is top document for juli.  Introduction, installation and
juli formatting are described here.

(If you are reading index.txt in juli package after installing juli(1),
please run juli(1) as follows and read html/index.html by browser.
To change output directory from html/ to your favarite one,
please edit doc/.juli/config file):
  $ cd doc      # move to package's doc/ directory.
  $ juli init   # initialize doc as juli-repository.
  $ juli        # generate html files under html/
  # (Now, read html/index.html by any browser)


= Introduction

Do you want to make a memo anytime anyplace(like <b>offline</b> environment)?
Do you want to use your <b>favorite editor</b> for wiki and/or any documentation?
Do you want to organize your idea by <b>outline-processor</b> and/or <b>wiki</b>?
In wiki, Did you think it's much better to <b>link</b> page <b>automatically</b>?

If you say 'yes!' at least once, <b>juli</b> may be your choice.

I wanted to have such a tool.

== About Outline-processor

Outline-processor is good.
I prefer editor + outline-processing command wihch generates some
pretty output (like HTML, PDF, etc).

Outline-processor tells me the overview of what I'm
thinking.  However, many outline-processing tool is not enough for me because
usage (keybinding, etc.) is quite different from my favorite editor.

== GUI for read, but not for write

Outlining is necessary only when I want to browse so that it is enough
to generate HTML and toggle to show/hide any level of contents.
Current browser (Firefox, IE[789], etc.) has enough capability to do that.

I didn't want to have any other fancy GUI since browser+HTML is enough for me.

GUI tool like Word-processor or GUI outline-processor is slow to invoke
the app.
Key-bindings for such tools don't fit me.  Editor (vi, emacs, or wahtever
you are now using) is the most suitable for me to input.

== Offline

When I'm getting in a train and working/thinking on my Note-PC,
sometimes an idea comes up in my mind so I want to make the memo
as quick and easy as possible anyplace anytime.
In such a situation, using favorite editor is good for me to write.

== About Wiki

Wiki is good, but it requires online.
It is ok for me only to link on browsing time.
I would like to make a memo offline as well.

I don't want to think about "link it by WikiName, or, well,
What is the notation to link in this wiki tool?" when I'm
editing.
<a href='http://projects.gnome.org/tomboy/'>Tomboy</a> does so in realtime,
but I don't need such a realtime feature.
It's enough for me to link on browsing time.  So, some trigger
to generate auto-linked HTML covers this needs.

I looked for such a tool, 
<a href='http://projects.gnome.org/tomboy/'>Tomboy</a>,
<a href='http://www.evernote.com/'>Evernote</a>,
<a href='http://en.wikipedia.org/wiki/Microsoft_OneNote'>OneNote</a>,
but from keybinding point of view, those are not good...

== Offline wiki + git = best solution!

I know why almost all of wiki are online is because collaboration.
However, offline editing and collaboration is already realized.
One of good tool is <a href='http://git-scm.com/'>git</a>.

I'm thinking offline wiki + git is the best solution.

Isn't it time to create such a tool for me?

= Design

== Purpose

Purposes of juli are:

* write my idea as quick as possible by using my favorite editor at anytime anyplace.
* view outline.
* auto-link each memo together as wiki
* publishing by web server

== Feature

Current juli has the following features:

* toggle to show/hide each content.
* header numbering.
* bulk-mode update
* auto link between memo

Detail explanation for each feature is as follows:

=== toggle to show/hide each content
Chapter, section, sub-sction, ... can be hidden/shown by clicking headerline
or [+]/[-] node.  This is for outline viewing. 

=== header numbering
Header is automatically  numbered as chapter, section, and sub-section, ...
Currently there is no option to disable this numbering:-(

=== bulk-mode update

When just enter juli(1) command without any option and no file argument,
it searches whole juli-repository(explained below) and generates html
only for updated text files.

==== juli-repository

Juli-repository (or juli-repo, in short) is a directory which contains
several memos.
output HTML directory can be configured at any place at 'init' command
(explained at juli(1)).

=== auto link between memo

Similar to <a href='http://en.wikipedia.org/wiki/Wiki'>wiki</a>,
juli(1) creates links to another page when the source memo contains 
a <i>filename</i> (without .txt extention) and the <i>filename</i>.txt
exists.
Unlike usual wiki, juli(1) automatically generates this link.

Example:

When source memo contains following paragraph:

  Do you know 'hello world'?  It is a basic word in computing world.

and there is computing.txt file in the same directory, the memo will be:

  Do you know 'hello world'?  It is a basic word in <a href=#>computing</a> world.

and the 'computing' hyperlink referrs to the target page.

Restriction:
* file in subdirectory of juli-repo is not recognized as a wikiname.  I'll support this soon.
* Wikiname in HTML tag is not recognized as wiki link.

== Using with git

Do you know <a href='http://git-scm.com/'>git</a>?
It is not only for programmer, but also for any file editting people.
Git provides revision control of files, and collaboration with other people.
Yes, it is very useful.

Juli is a personal tool, but when files are controlled by git,
you can collaborate with other people as <b>online wiki</b>(like Wikipedia)
does.

I think juli + git provides both offline and online advantages.

Juli and git have not yet been integrated perfectly.
It is necessary to do 'git init' manually.  However, after that,
text file revision control is handled by je(1).
 
= Install
== from gem
TBD

== from package
Prerequisites:
* rsync
* ruby-1.9
* RMagick (for photo(macro))
* gdbm (for tag(macro))

1. download package from http://sourceforge.net/projects/jjjuli/files/
1. run setup.rb as follows:

  $ tar zxvf juli-#.##.##.tgz
  $ cd juli-#.##.##
  $ ruby setup.rb                       # you may need 'sudo'

== from repository

Prerequisites:
* rsync
* ruby-1.9
* RMagick (for photo(macro))
* gdbm (for tag(macro))
* <a href='http://i.loveruby.net/en/projects/racc/'>racc</a>
* rake
* git

racc tool is required when you download from Sourceforge repository
and install it.

  $ git clone git://jjjuli.git.sourceforge.net/gitroot/jjjuli/jjjuli
  $ cd jjjuli
  $ rake                                # generate ruby source from *.y files
  $ ruby setup.rb                       # you may need 'sudo'

* prototype.js is used (included in this package).

= See Also

== Sub topics
Please read the followings for each topic:

tutorial::          Tutorial how to use juli.
je(1)::             je(1) command document
juli(1)::           juli(1) command document
juli formatting::   juli wiki formatting document
template::          juli template document
juli_tb.rb(1)::     juli_tb.rb(1) command document
slidy::             Slideshow generator
takahashi_method::  Slideshow generator (Takahashi method version)
doc/app::           juli API document (generated by 'rake doc')
tips::              several Howto-s

== Competitor

I had researched several tools before starting juli project.
I also see similar tools since juli project started.

See <a href='compare.ods'>Comparison table</a> for the detail.

I found the following competitors also after the comparison research:

* http://ikiwiki.info/
* http://gitit.net/
* https://github.com/github/gollum


== External Link
* http://en.wikipedia.org/wiki/Comparison_of_documentation_generators

= Misc
== Feedback

Any feedback is welcome.  Please check the followings:

* <a href='http://sourceforge.net/projects/jjjuli/reviews/'>Love/Hate</a>
* <a href='http://sourceforge.net/projects/jjjuli/forums'>Help</a>
* <a href='http://sourceforge.net/tracker/?group_id=390715'>Bug Report, Feature Requests</a>

== Author
Fuminori Ido, https://sourceforge.net/users/ido00

== License

You can use/re-distribute/change juli under GPL.
This distribution include files that are copyrighted by
somebody else, and these files can be re-distributed under those own
license.
These files include the condition of those licenses in themselves.
