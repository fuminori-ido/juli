index &gt; \{!juli(1)}

= NAME
juli    - Outline processor, personal &amp; offline wiki

= SYNOPSIS
juli [<i>general_options</i>] <i>COMMAND</i> [<i>command_options</i>] [<i>files</i>]

= DESCRIPTION
juli is an outline processor + offline wiki.

When juli(1) command is executed, HTML is generated under <i>output_top</i>
directory.  Where, <i>output_top</i> can be configured
(please see 'init' command section).


== Options

general options are:

--help::      show help
--version::   show version

== COMMAND

=== init
Initialize juli-repository(juli-repo in short).
Specify output directory with -o option.
When no option is specified, empy juli-repo is created and default
config file is created.

You can edit the config file later.  It's just YAML format file.

==== EXAMPLE

Following example creates:

$HOME/my_memo_root::
    juli-repo
/var/www/juli::
    output_top.
    generated html can be browsed via internet if http server recognizes this.

prepare output directory to browse at internet.  Of course, your http server
is required to recognize /var/www/juli:

  $ sudo mkdir /var/www/juli
  $ sudo chown YOURNAME /var/www/juli

prepare memo root directory for juli-repo:

  $ cd $HOME
  $ mkdir my_memo_root
  $ cd my_memo_root
  $ juli init -o /var/www/juli


==== options for 'init'
-o <i>output_top</i>::
  Specify output directory, which points to the top directory for
  generated html files.
  default = './html/'

-t <i>template</i>::
  Specify template under
  1) JULI_REPO/.juli or 2) RUBY_LIB/juli/template/.
  default = 'default.html'.

-e <i>ext</i>::
  generating html file extention.
  default = '.shtml'.

Where, JULI_REPO is the directory which you are creating now.
RUBY_LIB is the directory which juli library is installed
(e.g. /usr/local/lib/ruby/site_ruby/1.9/).

(v1.01) When you want to customize template, please follow the steps below
after executing 'juli init':

1. copy template file under lib/juli/template/ to JULI_REPO/.juli/
   (e.g. template name is 'blue_ocean'):
    $ cp RUBY_LIB/juli/template/default.html JULI_REPO/.juli/blue_ocean.html
1. edit JULI_REPO/.juli/blue_ocean.html as you like
1. edit JULI_REPO/.juli/config as follow as follows:
    template: blue_ocean

=== gen
When files are specified, each file will be converted by generator (default
is html). When no files are specified, bulk mode is executed.
'gen' command is default.

Example:

  juli                          # generate in bulk mode
  juli gen doc/poem.txt         # generate for the file
  juli gen -g tree              # show text tree in bulk mode
  juli gen -g tree doc/poem.txt # show text tree of the file

Wrong Example:

  juli doc/poem.txt       # the file is interpreted as command, so resulted error. 

==== options for 'gen'
-g <i>generator</i>::
  specify generator.
  Supported generators are in lib/juli/visitor/ directory.
  Default is html.

-f::
  force update.
  Even generated HTML file is newer than source text, generate again.

-t <i>template</i>::
  Specify template; it may be fullpath,
  relative path from current directory,
  under JULI_REPO/.juli, or under RUBY_LIB/juli/template/

-o <i>output_path</i>::
  specify output file path.

Template search priority is as follows:

1. If -t option is specified
  1. check if it is fullpath or relative path from current directory, or
  1. check it under JULI_REPO/.juli, or
  1. check it under RUBY_LIB/juli/template/
1. Otherwise
  1. check configured template under JULI_REPO/.juli, or
  1. check configured template under RUBY_LIB/juli/template/

Where, configured template means the template specified at .juli/config.

=== sitemap
generates sitemap.shtml under <i>output_top</i>/.
je(1) supports this; when edit text by je(1), the sitemap is
automatically generated.


=== recent_update
generates recent_update.shtml under <i>output_top</i>/.
je(1) supports this; when edit text by je(1), the recent_update is
automatically generated.

=== tag
generates _tag.shtml under <i>output_top</i>/.
This page shows tag list and wiki page related to the tag.

See tag(macro) to define tag.

= FILES

juli-repo::               directory for memo. 'init' command creates it.
output_dir::              directory for html generated files
juli-repo/.juli/config::  config file
doc/index::               top document for intro, install, syntax

= SEE ALSO

index::     juli top document

= MISC
== Author
Fuminori Ido, https://github.com/fuminori-ido/juli

== License

You can use/re-distribute/change juli under GPL.
This distribution include files that are copyrighted by
somebody else, and these files can be re-distributed under those own
license.
These files include the condition of those licenses in themselves.

<hr>
index &gt; \{!juli(1)}
