= NAME
juli    - Outline processor

= SYNOPSIS
juli [<i>general_options</i>] <i>COMMAND</i> [<i>command_options</i>] [<i>files</i>]

= DESCRIPTION
juli is an outline processor.

When juli(1) command is executed, HTML is generated under <i>output_top</i>
directory.  Where, <i>output_top</i> can be configured.
Please see 'init' command section.


== Purpose

Purposes of juli are:

* write my idea as quick as possible by using my favorite editor at anytime anyplace.
* view outline.
* auto-link each memo together as wiki
* browse via web

== Feature

Current juli has the following features:

* toggle to show/hide each content.
* header numbering.
* bulk-mode update
* auto link between memo

Detail explanation for each feature is as follows:

=== toggle to show/hide each content
Chapter, section, sub-sction, ... can be hidden/shown by clicking headerline
or [+]/[-] node.  This is for outline viewing. 

=== header numbering
Header is automatically  numbered.  Currently there is no option to disable this
numbering:-(

=== bulk-mode update

When just enter juli(1) command without any option and no file argument,
it searches whole juli-repository(explained below) and generates html
only for updated text files.

==== juli-repository

Juli-repository is a directory which contains several memos.
output HTML directory can be configured at any place at 'init' command
(explained later).

=== auto link between memo

Similar to <a href='http://en.wikipedia.org/wiki/Wiki'>wiki</a>,
juli(1) creates links to another page when the source memo contains 
a <i>filename</i> (without .txt extention) and the <i>filename</i>.txt
exists.
Unlink usual wiki, juli(1) automatically generates this link.

Example:

When source memo contains following paragraph:

  Do you know hello world?  It is basic words in computing world.

and there is computing.txt file in the same directory, the memo will be:

  Do you know hello world?  It is basic words in <a href=#>computing</a> world.

and the 'computing' hyper-link links to the target page.

== Options

general options are:

--help::      show help
--version::   show version

== COMMAND

=== init
Initialize juli-repository.  Specify output directory with -o option.
When no option is specified, empy juli-repo is created and skelton
config file is created.

You can edit the config file later.  It's just YAML format file.

==== EXAMPLE

Following example creates:

$HOME/my_memo_root::  juli-repository
/var/www/juli::       output_top.  generated html can be browsed via internet if http server recognizes this.

prepare output directory to browse at internet.  Of course, your http server
is required to recognize /var/www/juli:

  $ sudo mkdir /var/www/juli
  $ sudo chown wells /var/www/juli

prepare memo root directory for juli-repository:

  $ cd $HOME
  $ mkdir my_memo_root
  $ cd my_memo_root
  $ juli init -o /var/www/juli


==== options for 'init'
-o <i>output_top</i>:: Specify output directory, which points to the top directory for generated html files.

=== gen
When files are specified, each file will be converted by generator (default
is html). When no files are specified, bulk mode is executed.
'gen' command is default.

Example:

  juli                    # generate in bulk mode
  juli gen doc/poem.txt   # generate for the file
  juli gen -g tree        # show text tree in bulk mode

Wrong Example:

  juli doc/poem.txt       # the file is interpreted as command, so resulted error. 

==== options for 'gen'
-g <i>generator</i>:: Specify generator.  Supported generators are in lib/juli/visitor/ directory.  Default is html.

== Juli Document Syntax

Juli document syntax is similar to but very small subset of RD.


=== Header

Beggining '=' in line means header.  6 level headers can be used as follows:

1. '= Top level header title'
1. '== Second level header title'
1. '=== 3rd level header title'
1. '==== 4th level header title'
1. '===== 5th level header title'
1. '====== 6th level header title'

Example:


  = NAME
  juli    - Outline processor

  = SYNOPSIS
  juli [-g generator] file

will be what you see at the top of this page...

=== List
==== Ordered List

The line starts with "1. " (One dot space) is recognized as ordered list.
Not only '1' but also any number can be used.  However, actual assigned
numbers for ordered-list starts '1' and increments 1 for each. 

Example:

  1. Hello
  1. World

will be:

1. Hello
1. World

Restriction:

1. nest is not supported yet.
1. continous line is not supported yet.

==== Unordered List

The line starts with "* " (astarisk space) is recognized as unordered list.

Example:

  * Hello
  * World

will be:

* Hello
* World

Restriction:

1. nest is not supported yet.
1. continous line is not supported yet.

==== Dictionary List

The line with the following form is recognized as dictionary list:

  term:: description

Example:

  Ruby::  programing language, or a gem

will be:

Ruby::  programing language, or a gem

=== Block Quote

The line with leading spaces is recognized as blockquote.
Example:

  |   "The load to hell is paved with good intentions."
  |   -- derived proverb from original thought of Saint Bernard of Clairvaux

will be:

  "The load to hell is paved with good intentions."
  -- derived proverb from original thought of Saint Bernard of Clairvaux

(Where, '|' above is to avoid deleting spaces.  Please ignore it.)

=== HTML Extention

HTML tag can be written anyplace so you can use any html as follows:

* <i>Italic</i> by &lt;i&gt;Italic&lt;/i&gt;
* <b>Bold</b> by &lt;b&gt;Bold&lt;/b&gt;
* <s>Strikethrough</s> by &lt;s&gt;Strikethrough&lt;/s&gt;

==== Restriction

You can use any HTML. However, <b>juli markup syntax is higher priority</b>.
So, for example, tag nesting doesn't work because leading space at line is
recognized as blockquote.

Bad Example:

  |&lt;table&gt;
  |  &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
  |  &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;D&lt;/td&gt;&lt;/tr&gt;
  |&lt;/table&gt;

(Where, '|' above is to avoid deleting spaces.  Please ignore it.)

= FILES

juli-repo::   directory for memo.  'init' command creates it.
output_dir::  directory for html generated files
juli-repo/.juli/config::  config file

= TODO

1. Wiki
  1. support subdirectory
1. fix blank-line separated quote, list, etc.
1. tutorial
1. japanese doc
1. git for version control and publish
1. fix following situation:
  * abc
  * def

  * ghi
  * jkl

= SIMILAR TOOLS

rd::        ruby document, similar to pod
rdoc::      another ruby document, mainly for source comment
pod::       Plain old document in perl(1)
tomboy::    TBD
evernote::  TBD
nevernote:: TBD
WikiPad::   TBD
iKnow::     TBD
OneNote::   TBD

= MISC
== Terms

memo:: text file.  a.k.a. document.

== Author
Fumisky Wells, https://sourceforge.net/users/fwells00

== License

You can use/re-distribute/change juli under GPL.
This distribution include files that are copyrighted by
somebody else, and these files can be re-distributed under those own
license.
These files include the condition of those licenses in themselves.
