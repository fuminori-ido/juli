#!/usr/bin/env ruby
#
# = NAME
# juli    - Personal outline processor and wiki
#
# = SYNOPSIS
# juli [options] [files]
#
# = DESCRIPTION
# see doc/juli.txt for more detail.

$LOAD_PATH << File.join(File.dirname(__FILE__), '../lib')

require 'erb'
require 'fileutils'
require 'optparse'
require 'juli/juli_parser.tab.rb'

#------------------------------------------------------------------
# Configuration Part
#------------------------------------------------------------------
# Top directory for output HTML.  Default = $HOME/juli/
OUTPUT_TOP    = ENV['HOME'] + '/juli'


#------------------------------------------------------------------
# Global variable
#------------------------------------------------------------------
PKG_ROOT      = File.join(File.dirname(__FILE__), '..')
TEMPLATE_PATH = File.join(PKG_ROOT, 'lib/template')


#------------------------------------------------------------------
# Subroutine Part
#------------------------------------------------------------------
def copy_to_output_top(file)
  dest_path = File.join(OUTPUT_TOP, file)
  if !File.exist?(dest_path)
    FileUtils.cp(File.join(TEMPLATE_PATH, file), dest_path,
        :preserve=>true)
  end
end

def init
  if !File.directory?(OUTPUT_TOP)
    FileUtils.mkdir_p(OUTPUT_TOP)
  end
  copy_to_output_top('prototype.js')
  copy_to_output_top('juli.js')
  copy_to_output_top('juli.css')
end

def visitor_list
  result = []
  sorted_visitors = Dir.glob(File.join(PKG_ROOT, 'lib/juli/visitor/*.rb')).sort
  for f in sorted_visitors do
    next if f =~ /^\./
    result << File.basename(f).gsub(/\.rb$/, '')
  end
  'generator: ' + result.join(',') + ' (default=html)'
end

def camelize(str)
  str.gsub(/\/(.?)/) { "::#{$1.upcase}" }.gsub(/(?:^|_)(.)/) { $1.upcase }
end

# Visitor::#{str} constantize
def visitor(str)
  camelized = camelize(str)
  if Visitor.const_defined?(camelized)
    Visitor.const_get(camelize(str))
  else
    raise "Visitor #{camelized} is not defined."
  end
end


#------------------------------------------------------------------
# Main
#------------------------------------------------------------------
  init
  opt = OptionParser.new
  OPTS = {:g=>'html'}
  opt.on('-g generator', visitor_list){|v| OPTS[:g] = v}
  opt.parse!(ARGV)
  if ARGV.size == 0
    visitor(OPTS[:g]).run
  else
    for file in ARGV do
      JuliParser.new.parse(file, visitor(OPTS[:g]))
    end
  end
